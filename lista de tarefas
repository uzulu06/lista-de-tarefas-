import React, { useReducer, useState } from "react";

interface Task {
  id: string;
  title: string;
  completed: boolean;
  createdAt: number;
}

type Action =
  | { type: "ADD_TASK"; payload: { title: string } }
  | { type: "EDIT_TASK"; payload: { id: string; title: string } }
  | { type: "DELETE_TASK"; payload: { id: string } }
  | { type: "TOGGLE_TASK"; payload: { id: string } };

function generateId() {
  return Math.random().toString(36).substring(2, 9);
}

function tasksReducer(state: Task[], action: Action): Task[] {
  switch (action.type) {
    case "ADD_TASK": {
      const title = action.payload.title.trim();
      if (!title) return state;
      const newTask: Task = {
        id: generateId(),
        title,
        completed: false,
        createdAt: Date.now(),
      };
      return [newTask, ...state];
    }
    case "EDIT_TASK":
      return state.map((t) =>
        t.id === action.payload.id ? { ...t, title: action.payload.title } : t
      );
    case "DELETE_TASK":
      return state.filter((t) => t.id !== action.payload.id);
    case "TOGGLE_TASK":
      return state.map((t) =>
        t.id === action.payload.id ? { ...t, completed: !t.completed } : t
      );
    default:
      return state;
  }
}

export default function App() {
  const [tasks, dispatch] = useReducer(tasksReducer, [] as Task[]);
  const [title, setTitle] = useState("");

  function handleAdd(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    dispatch({ type: "ADD_TASK", payload: { title } });
    setTitle("");
  }

  return (
    <div style={{ padding: "2rem" }}>
      <h1>ðŸ“‹ Lista de Tarefas</h1>
      <form onSubmit={handleAdd} style={{ marginBottom: "1rem" }}>
        <input
          type="text"
          value={title}
          placeholder="Digite uma tarefa"
          onChange={(e) => setTitle(e.target.value)}
        />
        <button type="submit">Adicionar</button>
      </form>
      {tasks.length === 0 ? (
        <p>Sem tarefas no momento!</p>
      ) : (
        <ul>
          {tasks.map((task) => (
            <li key={task.id}>
              <input
                type="checkbox"
                checked={task.completed}
                onChange={() =>
                  dispatch({ type: "TOGGLE_TASK", payload: { id: task.id } })
                }
              />
              <span
                style={{
                  textDecoration: task.completed ? "line-through" : "",
                  marginRight: "1rem",
                }}
              >
                {task.title}
              </span>
              <button
                onClick={() => {
                  const novoTitulo = prompt("Novo tÃ­tulo:", task.title);
                  if (novoTitulo) {
                    dispatch({
                      type: "EDIT_TASK",
                      payload: { id: task.id, title: novoTitulo },
                    });
                  }
                }}
              >
                Editar
              </button>
              <button
                onClick={() =>
                  dispatch({ type: "DELETE_TASK", payload: { id: task.id } })
                }
              >
                Excluir
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
